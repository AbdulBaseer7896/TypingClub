
const Paragraphs = [
    { difficulty: 'easy', number: false, symbols: false, time: '30s', text: "The quick brown fox jumps over the lazy dog. This sentence uses every letter of the English alphabet. It is commonly used for typing practice." },
    { difficulty: 'easy', number: false, symbols: false, time: '60s', text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus lacinia odio vitae vestibulum. Donec convallis arcu nec sapien cursus, nec luctus lacus iaculis." },
    { difficulty: 'easy', number: false, symbols: false, time: '120s', text: "It was a beautiful sunny day. Birds were chirping, and the sky was clear. People were out enjoying the weather, taking walks in the park and chatting with friends." },
    { difficulty: 'easy', number: false, symbols: true, time: '30s', text: "Hello world! Welcome to the coding universe. Practice makes perfect, so let's get started with coding basics & symbols. @#%^&*()" },
    { difficulty: 'easy', number: false, symbols: true, time: '60s', text: "The quick brown fox jumps over the lazy dog. 1234567890. Special characters include: @#$%^&*(). Learning to type can be fun and educational!" },
    { difficulty: 'easy', number: false, symbols: true, time: '120s', text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. 1234567890. Curabitur vehicula eros ac neque fermentum, ac egestas urna blandit. @#^&*() Enjoy the process of learning!" },
    { difficulty: 'easy', number: true, symbols: false, time: '30s', text: "In the year 2024, technology continues to advance. 2024 is a significant year for many reasons. Keep track of the progress and changes in technology!" },
    { difficulty: 'easy', number: true, symbols: false, time: '60s', text: "The year 2024 brings new challenges and opportunities. Numbers play a crucial role in data analysis. For instance, 1000 might be the number of new innovations this year!" },
    { difficulty: 'easy', number: true, symbols: false, time: '120s', text: "In the year 2024, numerous advancements in various fields are anticipated. Technologies like AI, robotics, and quantum computing will continue to evolve. Numbers like 2024, 3000, and 5000 reflect milestones and goals in these domains." },
    { difficulty: 'easy', number: true, symbols: true, time: '30s', text: "The year 2024 is full of potential. Check out new features in your software, like version 1.0.0. For instance, a quick task could involve handling numbers like 100 or symbols such as @#&!" },
    { difficulty: 'easy', number: true, symbols: true, time: '60s', text: "The technology landscape in 2024 is diverse. Programming languages, tools, and techniques will feature numbers such as 1000 and symbols like #&%. Learning to handle these effectively is key to success." },
    { difficulty: 'easy', number: true, symbols: true, time: '120s', text: "As we progress through 2024, the significance of numbers and symbols in programming cannot be overstated. For example, a project might involve handling data points like 2048 and special symbols such as @#^&*. Mastery of these elements is crucial." },
    { difficulty: 'medium', number: false, symbols: false, time: '30s', text: "Programming often requires careful attention to detail. Simple tasks include writing clean, efficient code. Practice consistently to improve your skills and speed!" },
    { difficulty: 'medium', number: false, symbols: false, time: '60s', text: "Typing fast is a skill that can be developed with practice. Focus on accuracy first, and gradually increase your speed. The key is consistent, focused practice." },
    { difficulty: 'medium', number: false, symbols: false, time: '120s', text: "Effective typing requires both speed and accuracy. Start by practicing with simple sentences and progress to more complex ones. The goal is to type effortlessly and accurately at a high speed." },
    { difficulty: 'medium', number: false, symbols: true, time: '30s', text: "Coding challenges often include various symbols like {}, [], and (). Practice using these symbols effectively in your code to avoid syntax errors and improve readability." },
    { difficulty: 'medium', number: false, symbols: true, time: '60s', text: "Effective programming includes handling symbols such as #, &, and *. These symbols often appear in different contexts like coding, configuration, and documentation. Understanding their use is important for efficient coding." },
    { difficulty: 'medium', number: false, symbols: true, time: '120s', text: "Mastering the use of symbols in coding is crucial. Symbols like {}, [], and @ are often used in various programming languages and frameworks. Practice using these symbols in different contexts to improve your coding efficiency." },
    { difficulty: 'medium', number: true, symbols: false, time: '30s', text: "Working with numbers is a fundamental part of programming. For instance, you might deal with data values like 42 or 2024. Learning to manipulate and understand these numbers is essential for effective programming." },
    { difficulty: 'medium', number: true, symbols: false, time: '60s', text: "Programming often involves calculations and data manipulation. Numbers like 2048 and 2024 are commonly used in algorithms and data structures. Practice working with these numbers to enhance your programming skills." },
    { difficulty: 'medium', number: true, symbols: false, time: '120s', text: "In programming, handling numbers efficiently is crucial. For example, managing large datasets might involve numbers such as 10000 or 50000. Understanding how to work with these numbers and perform calculations accurately is essential for effective data processing." },
    { difficulty: 'medium', number: true, symbols: true, time: '30s', text: "Numbers and symbols are integral to programming. You might encounter numbers like 101 or 2024 and symbols such as @, #, and &. Practice using these elements in different coding scenarios to improve your proficiency." },
    { difficulty: 'medium', number: true, symbols: true, time: '60s', text: "Programming involves using both numbers and symbols. Examples include handling numerical values like 2024 and special characters such as @ and #. Mastery of these elements is important for writing effective and error-free code." },
    { difficulty: 'medium', number: true, symbols: true, time: '120s', text: "Combining numbers and symbols in programming is essential for creating complex algorithms and handling various data types. For instance, you might work with numbers like 4096 and symbols such as {}, [], and @ in your code. Developing proficiency with these elements will enhance your coding skills." },
    { difficulty: 'hard', number: false, symbols: false, time: '30s', text: "Advanced programming often involves complex algorithms and data structures. Efficiently handling these requires not just speed but also precision and a deep understanding of coding principles." },
    { difficulty: 'hard', number: false, symbols: false, time: '60s', text: "Complex coding tasks require a combination of speed and accuracy. Tasks might include optimizing algorithms, debugging intricate issues, and implementing advanced features. Mastery of these skills is critical for high-level programming." },
    { difficulty: 'hard', number: false, symbols: false, time: '120s', text: "In-depth programming involves working on large-scale projects and complex systems. This might include designing scalable architectures, managing large datasets, and implementing sophisticated algorithms. Skillful handling of these challenges is essential for success in advanced programming roles." },
    { difficulty: 'hard', number: false, symbols: true, time: '30s', text: "Advanced programming often includes working with special symbols like @, #, and {} in complex contexts. Mastery of these symbols is crucial for developing robust and error-free code in high-stakes projects." },
    { difficulty: 'hard', number: false, symbols: true, time: '60s', text: "Complex coding projects frequently require the use of various symbols such as {}, [], and #. These symbols play a key role in coding syntax and structure. Practicing with these symbols in advanced scenarios will help improve your programming proficiency." },
    { difficulty: 'hard', number: false, symbols: true, time: '120s', text: "Mastering the use of symbols in advanced programming tasks is crucial. Symbols like {}, [], @, and # are often used in complex algorithms and data structures. Developing expertise in handling these symbols is essential for high-level coding and system design." },
    { difficulty: 'hard', number: true, symbols: false, time: '30s', text: "Handling large numbers and complex data sets is a key aspect of advanced programming. Numbers such as 1000000 or 999999 require precise manipulation and understanding to ensure accuracy in your code." },
    { difficulty: 'hard', number: true, symbols: false, time: '60s', text: "In advanced programming, managing large numerical values and data structures is essential. For instance, handling numbers like 999999 and 1000000 requires a thorough understanding of algorithms and data processing techniques." },
    { difficulty: 'hard', number: true, symbols: false, time: '120s', text: "Effective management of large-scale data and complex algorithms involves handling significant numerical values such as 1000000 and beyond. Developing proficiency with these numbers and understanding their implications in programming is crucial for success in advanced roles." },
    { difficulty: 'hard', number: true, symbols: true, time: '30s', text: "Combining numbers and symbols in complex coding tasks is crucial. For example, you might work with numerical values like 2048 and special symbols like @ and # in advanced algorithms and data processing scenarios." },
    { difficulty: 'hard', number: true, symbols: true, time: '60s', text: "Advanced programming often involves integrating numbers such as 4096 and symbols like {} and []. These elements are essential for developing sophisticated code and managing complex systems effectively." },
    { difficulty: 'hard', number: true, symbols: true, time: '120s', text: "Mastering the integration of numbers and symbols in high-level programming tasks is essential. Handling large numbers like 5000000 and symbols such as @, #, and {} is crucial for designing scalable and efficient systems." }
];



export default Paragraphs;